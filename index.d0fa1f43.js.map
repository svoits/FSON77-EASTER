{"mappings":"YAAA,IAAAA,EAAe,CACbC,KAAMC,SAASC,cAAc,cAC7BC,SAAUF,SAASC,cAAc,eCF7BE,EAAc,O,IAQpBC,EAAe,CAAEC,QANjB,SAAiBC,GACf,IAAMC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQR,KAAiB,GAC/DI,EAAMK,KAAKN,GACXI,aAAaG,QAAQV,EAAaK,KAAKM,UAAUP,G,GCcxCQ,EAAS,W,IAACC,EAAIC,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAG,G,OAC1BE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,G,GAGP,G,EC9BE,SAASG,EAAWC,GACzB,IAAMtB,EAAO,CAAEiB,GAAIR,KAMnB,OAJA,IAAIc,SAASD,EAAEE,eAAeC,SAAQ,SAACC,EAAOC,GAC5C3B,EAAK2B,GAAQD,C,IAGR1B,C,CCUTR,EAAKC,KAAKmC,iBAAiB,UChBpB,SAAsBN,GAC3BA,EAAEO,iBACF/B,EAAWC,QAAQsB,EAAWC,G","sources":["src/js/refs.js","src/js/localStorageAPI.js","node_modules/nanoid/index.browser.js","src/js/createNote.js","src/index.js","src/js/onFormSubmit.js"],"sourcesContent":["export default {\n  form: document.querySelector('#task-form'),\n  taskList: document.querySelector('#task-list'),\n};\n","const STORAGE_KEY = 'note';\n\nfunction addNote(note) {\n  const notes = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];\n  notes.push(note);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(notes));\n}\n\nexport default { addNote };\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\n\nexport function createNote(e) {\n  const note = { id: nanoid() };\n\n  new FormData(e.currentTarget).forEach((value, name) => {\n    note[name] = value;\n  });\n\n  return note;\n}\n","/**\n * Створи список справ.\n * На сторінці є два інпути які має вводиться назва і текст задачі.\n * Після натискання на кнопку \"Додати\" завдання додається до списку #task-list.\n *\n * Розмітка картки задачі\n * <li class=\"task-list-item\">\n *     <button class=\"task-list-item-btn\">Удалить</button>\n *     <h3>Заголовок</h3>\n *     <p>Текст</p>\n * </li>\n *\n * У кожної картки має бути кнопка \"Видалити\", щоб можна було\n * прибрати завдання зі списку.\n * Список із завданнями має бути доступним після перезавантаження сторінки.\n */\nimport refs from './js/refs';\nimport { onFormSubmit } from './js/onFormSubmit';\n\nrefs.form.addEventListener('submit', onFormSubmit);\n","import storageAPI from './localStorageAPI';\nimport { createNote } from './createNote';\n\nexport function onFormSubmit(e) {\n  e.preventDefault();\n  storageAPI.addNote(createNote(e));\n}\n"],"names":["$37e33676934ad046$export$2e2bcd8739ae039","form","document","querySelector","taskList","$48d731dcdd8bc0d3$var$STORAGE_KEY","$48d731dcdd8bc0d3$export$2e2bcd8739ae039","addNote","note","notes","JSON","parse","localStorage","getItem","push","setItem","stringify","$8069ef7e6126e429$export$ac4959f4f1338dfc","size","arguments","length","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$357086e60ec70424$export$4640c0d5ffcf906e","e","FormData","currentTarget","forEach","value","name","addEventListener","preventDefault"],"version":3,"file":"index.d0fa1f43.js.map"}